(* Coursera Programming Languages, Homework 3, Provided Code *)

fun only_capitals strlist =
    List.filter (fn c => Char.isUpper(String.sub(c, 0))) strlist

(* f(x,init) *)
fun longest_string1 strlist =
    case strlist of
	[] => ""
      | _ => foldl (fn (x, init) => if String.size init >= String.size x then init else x) "" strlist

fun longest_string2 strlist =
    case strlist of
	[] => ""
      | _ => foldl (fn (x, init) => if String.size x >= String.size init then x else init) "" strlist

fun longest_string_helper f strlist = foldl (fn (a,b) => if f(String.size a, String.size b) then a else b) "" strlist
    (* case strlist of *)
    (* 	[] => "" *)
    (*   | s::strlist' => let val longStr = longest_string_helper f strlist' *)
    (* 		      in *)
    (* 			  if f(String.size s, String.size longStr) *)
    (* 			  then s *)
    (* 			  else longStr *)
    (* 		      end *)

val longest_string3 = longest_string_helper (fn (x,y) => x > y)
val longest_string4 = longest_string_helper (fn (x,y) => x >= y)

val longest_capitalized = longest_string1 o only_capitals


val rev_string = implode o rev o explode
    
exception NoAnswer

fun first_answer f xs =
    case xs of
	[] => raise NoAnswer
      | x::xs' => case f x of
		      NONE => first_answer f xs'
		    | SOME v => v

fun all_answers f xs =
    let fun helper acc xs =
	case xs of
	    [] => SOME acc
	  | x::xs' => case (f x) of
			  SOME v => helper (acc@v) xs'
			| NONE => NONE
    in helper [] xs
    end
		 
datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern

datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu

fun g f1 f2 p =
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end

val count_wildcards = g (fn _ => 1) (fn _ => 0)
val count_wild_and_variable_lengths = g (fn _ => 1) (fn x => String.size x)

fun count_some_var (s, p) =
    g (fn _ => 0) (fn x => if x = s then 1 else 0) p

fun check_pat p =
    let
	fun extractStr p =
	    case p of
		Wildcard          => []
	      | Variable x        => [x]
	      | TupleP ps         => List.foldl (fn (p, retlist) => (extractStr p) @ retlist)  [] ps
	      | ConstructorP(_,p) => extractStr p
	      | _                 => []

	fun isDistinct strlist =
	    case strlist of
		[] => true
	      | s::strlist' => if List.exists (fn x => x = s) strlist'
			       then false
			       else isDistinct strlist'
 (* just "(List.exists (fnx=>x=s) strlist') andalso (isDistinct strlist')" maybe OK, but in which case the funtion will no longer be a tail recursive function*)
    in
	isDistinct (extractStr p)
    end

fun match (v, p) =
    case (v,p) of
	(_,Wildcard) => SOME []
      | (_,Variable s) => SOME [(s,v)]
      | (Unit, UnitP) => SOME []
      | (Const n1, ConstP n2) => if n1 = n2 then SOME [] else NONE
      | (Tuple vs, TupleP ps) => if List.length vs = List.length ps 
				 then all_answers match (ListPair.zip(vs, ps))
				 else NONE
      | (Constructor(s1,p1), ConstructorP(s2,p2))  => if s1=s2 then match (p1, p2) else NONE
      | _ => NONE 
					


	
fun first_match v ps =
    (SOME (first_answer (fn p => match (v, p)) ps)) handle NoAnswer => NONE

	
(**** for the challenge problem only ****)

datatype typ = Anything
	     | UnitT
	     | IntT
	     | TupleT of typ list
	     | Datatype of string

(**** you can put all your code here ****)

