(* 1. Write a function is_older that takes two dates and evaluates to true or false. It evaluates to true if the rst argument is a date that comes before the second argument. (If the two dates are the same, the result is false.) *)
fun is_older(right : int * int * int, left : int * int * int)=
    if (#1 right < #1 left) orelse ((#1 right = #1 left) andalso (#2 right < #2 left)) orelse ((#1 right = #1 left) andalso (#2 right = #2 left) andalso (#3 right < #3 left))
    then true
    else false

(* 2. Write a function number_in_month that takes a list of dates and a month (i.e., an int) and returns how many dates in the list are in the given month. *)
fun number_in_month(dates : (int * int * int) list, month : int)=
    if null dates
    then 0
    else
	let
	    val cnt = number_in_month(tl dates, month)
	in
	    if #2 (hd dates) = month
	    then cnt + 1
	    else cnt
	end

(* 3. Write a function number_in_months that takes a list of dates and a list of months (i.e., an int list)and returns the number of dates in the list of dates that are in any of the months in the list of months.Assume the list of months has no number repeated. *)
fun number_in_months(dates : (int * int * int) list, months : int list)=
    if null dates orelse null months
    then 0
    else
	let
	    val cumsum = number_in_months(dates, tl months)
	    val cur_sum = number_in_month(dates, hd months)
	in
	    cumsum+cur_sum
	end

(* 4. Write a function dates_in_month that takes a list of dates and a month (i.e., an int) and returns a list holding the dates from the argument list of dates that are in the month. The returned list should contain dates in the order they were originally given. *)

fun dates_in_month(dates : (int * int * int) list, month : int)=
    if null dates
    then []
    else
	let
	    val prelist = dates_in_month(tl dates, month)
	in
	    if #2 (hd dates) = month
	    then (hd dates) :: prelist
	    else prelist
	end

(* 5. Write a function dates_in_months that takes a list of dates and a list of months (i.e., an int list) and returns a list holding the dates from the argument list of dates that are in any of the months in the list of months. Assume the list of months has no number repeated. Hint: Use your answer to the previous problem and SML's list-append operator (@). *)
fun dates_in_months(dates : (int * int * int) list, months : int list)=
    if null dates orelse null months
    then []
    else
	let
	    val prelist = dates_in_months(dates, tl months)
	    val curlist = dates_in_month(dates, hd months)
	in
	    curlist @ prelist
	end

(* 6. Write a function get_nth that takes a list of strings and an int n and returns the nth element of the list where the head of the list is 1st. Do not worry about the case where the list has too few elements: your function may apply hd or tl to the empty list in this case, which is okay. *)
fun get_nth(str :  string list, n : int)=
    if n = 1
    then hd str
    else get_nth(tl str, n-1)

(* 7. Write a function date_to_string that takes a date and returns a string of the form January 20, 2013(for example). Use the operator ^ for concatenating strings and the library function Int.toString for converting an int to a string. For producing the month part, do not use a bunch of conditionals. Instead, use a list holding 12 strings and your answer to the previous problem. For consistency, put a comma following the day and use capitalized English month names: January, February, March, April, May, June, July, August, September, October, November, December. *)
fun date_to_string(date : int * int * int)=
    let
	val str_month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    in
	get_nth(str_month, #2 date)^" "^Int.toString(#3 date)^", "^Int.toString(#1 date)
    end
